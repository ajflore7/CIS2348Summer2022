# Anthony Flores 1792816
import csv
import datetime

class StudentAcademics:  # class that has all the requirements for student academics

    def __init__(self, student_id, last_name, first_name, major, disciplinary_action, gpa, graduation_date):
        self.student_id = student_id
        self.last_name = last_name
        self.first_name = first_name
        self.major = major
        self.disciplinary_action = disciplinary_action
        self.gpa = gpa
        self.graduation_date = graduation_date


class Roster:  # dict for the students

    def __init__(self):
        self.students = {}

    def get_student(self, student_id):
        return self.students[student_id]

    def add_student(self, student):
        self.students[student.student_id] = student

    def get_all_students(self):
        all_students = []
        for student_id in self.students:
            student = self.students[student_id]
            all_students.append(student)

        return all_students

    def get_students_using_gpa(self):
        gpa_list = []
        student_list = []
        for student in self.students.values():
            if float(student.gpa) not in gpa_list:
                gpa_list.append(float(student.gpa))
        gpa_list.sort(reverse=True)
        for gpa in gpa_list:
            for student in self.students.values():
                if float(student.gpa) == gpa:
                    student_list.append(student)
        return student_list

    def get_students_using_major(self, major):
        students_in_major = {}
        for student_id in self.students:
            student = self.students[student_id]
            if student.major == major:
                students_in_major[student_id] = student
        return students_in_major

    def get_students_by_grad_date(self):
        grad_date_list = []
        student_list = []
        for student in self.students.values():
            student_date = datetime.datetime.strptime(student.graduation_date, '%m/%d/%Y').date()
            if student_date not in grad_date_list:
                grad_date_list.append(student_date)
        grad_date_list.sort()
        for graduation_date in grad_date_list:
            for student in self.students.values():
                student_date = datetime.datetime.strptime(student.graduation_date, '%m/%d/%Y').date()
                if student_date == graduation_date:
                    student_list.append(student)
        return student_list


    def get_students_using_last_name(self):
        last_names = []
        student_list = []
        for student in self.students.values():
            if student.last_name not in last_names:
                last_names.append(student.last_name)
        last_names.sort()
        for last_name in last_names:
            for student in self.students.values():
                if student.last_name == last_name:
                    student_list.append(student)
        return student_list

def floats(number):
    try:
        float(number)
        return True
    except:
        return False

def rounding(number):
    return round(number * (10**10)) / (10**10)

if __name__ == '__main__':
    roster = Roster()
    all_majors = []

    with open('StudentsMajorsList(1).csv', mode = 'r') as csvfile:  # reads csv file
        reader = csv.reader(csvfile)
        for row in reader:
            # row = line.split(',')
            student_id = row[0]
            ln = row[1]
            fn = row[2]
            major = row[3]
            if major not in all_majors:
                all_majors.append(major)
            gpa = None
            grad_date = None
            disciplinary_action = row[4]
            student = StudentAcademics(student_id, ln, fn, major, disciplinary_action, gpa, grad_date)
            roster.add_student(student)  # adds to roster

    with open('GPAList(1).csv', mode = 'r') as csvfile:  # reads csv file
        reader = csv.reader(csvfile)
        for row in reader:
            student_id = row[0]
            gpa = row[1]
            student = roster.get_student(student_id)  # adds to roster
            student.gpa = gpa

    with open('GraduationDatesList(1).csv', mode= 'r') as csvfile:  # reads csv file
        reader = csv.reader(csvfile)
        for row in reader:
            student_id = row[0]
            graduation_date = row[1]
            student = roster.get_student(student_id)
            student.graduation_date = graduation_date

    user_input = input('Enter major and GPA or enter "q" to quit: \n') # this is the query that will ask for user input
    while user_input != 'q': # the q is if the user wants to quit out of the query
        academics = ''
        grade = ''
        count1 = 0
        count2 = 0
        for line in all_majors: # gathers majors out of the query counts the number of majors
            if line in user_input:
                academics = line
                count1 += 1
        user_input_split = user_input.split(' ') # splits the user input

        for line in user_input_split: # gathers gpa out of the query counts the number of gpa
            if floats(line):
                grade = line
                count2 += 1
        if count1 != 1 and count2 != 1:
            print('No such student')
        all_students = roster.get_all_students()

        student_list1 = []

        print('Your student(s):') # this will output what students matches the query input
        for student in all_students:
            student_date = datetime.datetime.strptime(student.graduation_date, '%m/%d/%Y').date() # sets date as the correct format
            if student.major == academics and student_date > datetime.date.today() and disciplinary_action != 'Y': #checks to see if they meet the required attriutes
                if rounding(float(grade) - .1) <= float(student.gpa) <= rounding(float(grade) + .1):
                    student_list1.append(student)
        for student in student_list1:
            print(f'{student.student_id}, {student.first_name}, {student.last_name}, {student.gpa}')

        student_list2 = []

        print('You may, also, consider:')
        for student in all_students:
            student_date = datetime.datetime.strptime(student.graduation_date, '%m/%d/%Y').date() # sets date as the correct format
            if student.major == academics and student_date > datetime.date.today() and disciplinary_action != 'Y': #checks to see if they meet the required attriutes
                if rounding(float(grade) - .25) <= float(student.gpa) <= rounding(float(grade) + .25):
                    student_list2.append(student)
        for student in [student for student in student_list2 if student not in student_list1]:
            print(f'{student.student_id}, {student.first_name}, {student.last_name}, {student.gpa}')

        if student_list2 == []:
            for student in all_students:
                student_date = datetime.datetime.strptime(student.graduation_date,
                                                          '%m/%d/%Y').date()  # sets date as the correct format
                if student.major == academics and student_date > datetime.date.today() and disciplinary_action != 'Y':  # checks to see if they meet the required attriutes
                    if rounding(float(grade) - .1) <= float(student.gpa) <= rounding(float(grade) + .1):
                        student_list1.append(student)
            for student in student_list1:
                print(f'{student.student_id}, {student.first_name}, {student.last_name}, {student.gpa}')

        user_input = input('Enter major and GPA or enter "q" to quit: \n')
